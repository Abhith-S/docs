<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Uplink CLI on Storj Docs</title><link>/dcs/api-reference/uplink-cli/</link><description>Recent content in Uplink CLI on Storj Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/dcs/api-reference/uplink-cli/index.xml" rel="self" type="application/rss+xml"/><item><title>cp</title><link>/dcs/api-reference/uplink-cli/cp-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/cp-command/</guid><description>cp # Usage # Windows ./uplink.exe cp [flags] SOURCE DESTINATION Linux uplink cp [flags] SOURCE DESTINATION macOS uplink cp [flags] SOURCE DESTINATION The cp command is used to upload and download objects. The cp command abstracts the complexity of encryption, erasure coding, and distributing pieces of a file to storage nodes.
Flags # Flag Description --access string the serialized access, or name of the access to use -r, --recursive Perform a recursive copy -t, --transfers int Controls how many uploads/downloads to perform in parallel (default 1) --dry-run Print what operations would happen but don&amp;rsquo;t execute them --progress Show a progress bar when possible (default true) --range string Downloads the specified range bytes of an object.</description></item><item><title>import</title><link>/dcs/api-reference/uplink-cli/import-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/import-command/</guid><description>import # Usage # Windows ./uplink.exe import [flags] NAME (ACCESS | FILE) Linux uplink import [flags] NAME (ACCESS | FILE) macOS uplink import [flags] NAME (ACCESS | FILE) Flags # Flag Description --help, -h help for import --force, -f overwrite the existing access grant Examples # Import access grant from a file # Windows ./uplink.exe import cheesecake cheesecake.access Linux uplink import cheesecake cheesecake.access macOS uplink import cheesecake cheesecake.access Import access grant with a key # Windows .</description></item><item><title>ls</title><link>/dcs/api-reference/uplink-cli/ls-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/ls-command/</guid><description>ls # Usage # Windows ./uplink.exe ls [sj://BUCKET[/PREFIX]] [flags] Linux uplink ls [sj://BUCKET[/PREFIX]] [flags] macOS uplink ls [sj://BUCKET[/PREFIX]] [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --encrypted if true, show paths as base64-encoded encrypted paths --expanded, -x Use expanded output, showing object expiration times and whether there is custom metadata attached --help, -h help for ls --pending if true, list incomplete objects instead --recursive, -r if true, list recursively Examples # We consider the following object hierarchy throughout these examples:</description></item><item><title>mb</title><link>/dcs/api-reference/uplink-cli/uplink-mb-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/uplink-mb-command/</guid><description>mb # Usage # Windows ./uplink.exe mb [flags] sj://&amp;lt;BUCKET&amp;gt; Linux uplink mb [flags] sj://&amp;lt;BUCKET&amp;gt; macOS uplink mb [flags] sj://&amp;lt;BUCKET&amp;gt; Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for mb Examples # Create bucket # Windows ./uplink.exe mb sj://cakes Linux uplink mb sj://cakes macOS uplink mb sj://cakes Nested buckets are not supported. Output:</description></item><item><title>mv</title><link>/dcs/api-reference/uplink-cli/mv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/mv/</guid><description>mv # Usage # Windows ./uplink.exe mv SOURCE DESTINATION [flags] Linux uplink mv SOURCE DESTINATION [flags] macOS uplink mv SOURCE DESTINATION [flags] The mv command is used to move or rename objects within the same Storj DCS project. The mv command uses a server-side move (rename) method, it does not incur a fee for downloading and will be performed with no delay.
Flags # Flag Description --access string the serialized access, or name of the access to use --help, -h help for mv Examples # Move an object within an existing bucket # When the mv command is used to move a file within Storj DCS, the CLI will move (rename) the object using the server-side method to rename the object.</description></item><item><title>rb</title><link>/dcs/api-reference/uplink-cli/rb-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/rb-command/</guid><description>rb # Usage # Windows ./uplink.exe rb sj://BUCKET [flags] Linux uplink rb sj://BUCKET [flags] macOS uplink rb sj://BUCKET [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --force if true, empties the bucket of objects first --help, -h help for rb Examples # Delete empty bucket # Windows ./uplink.exe rb sj://cakes Linux uplink rb sj://cakes macOS uplink rb sj://cakes Output:
Delete bucket and all the objects it contains # Windows .</description></item><item><title>rm</title><link>/dcs/api-reference/uplink-cli/rm-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/rm-command/</guid><description>rm # Usage # Windows ./uplink.exe rm sj://BUCKET/KEY [flags] Linux uplink rm sj://BUCKET/KEY [flags] macOS uplink rm sj://BUCKET/KEY [flags] Flags # Flag Description --access string the serialized access, or name of the access to use --encrypted if true, treat paths as base64-encoded encrypted paths --help, -h help for rm --parallelism, -p int Controls how many removes to perform in parallel (default 1) --pending Remove pending object uploads instead --recursive, -r Remove recursively --help, -h help for rm Examples # Delete an object # Windows .</description></item><item><title>setup</title><link>/dcs/api-reference/uplink-cli/setup-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/setup-command/</guid><description>setup # Usage # Windows ./uplink.exe setup [flags] Linux uplink setup [flags] macOS uplink setup [flags] Flags # Flag Description --auth-service string If generating backwards-compatible S3 Gateway credentials, use this auth service (default https://auth.us1.storjshare.io) Global flags # Flag Description --config-dir string Directory that stores the configuration --help, -h help for setup --advanced when used with -h, prints advanced flags help Example # 1. Start the CLI wizard.
Windows PowerShell # Navigate to the directory your uplink.</description></item><item><title>share</title><link>/dcs/api-reference/uplink-cli/share-command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/dcs/api-reference/uplink-cli/share-command/</guid><description>share # Usage # Windows ./uplink.exe share [ALLOWED_PATH_PREFIX]... [flags] Linux uplink share [ALLOWED_PATH_PREFIX]... [flags] macOS uplink share [ALLOWED_PATH_PREFIX]... [flags] An access generated using uplink share with no arguments creates an access to your entire project with read permissions. Flags # Flag Description --access string the serialized access, or name of the access to use --auth-service string url for shared auth service, https://auth.storjshare.io by default
--base-url string the base url for link sharing, https://link.</description></item></channel></rss>